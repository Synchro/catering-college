#!/bin/bash

# mostly following this
# http://wiki.opscode.com/display/chef/Installing+Chef+Server+Manually

#set -e

STARTDIR=`pwd`

# read the config file
. config

# install some packages
sudo apt-get -y install curl
sudo apt-get -y install build-essential
sudo apt-get -y install couchdb

# http://askubuntu.com/questions/27982/bypass-rabbitmq-ok-dialog-on-install/30160
echo "rabbitmq-server rabbitmq-server/upgrade_previous note" | sudo debconf-set-selections
sudo apt-get install -y rabbitmq-server

# configure rabbit (if it's not already done)
[ `sudo rabbitmqctl list_vhosts | grep chef` ] || sudo rabbitmqctl add_vhost /chef
[ `sudo rabbitmqctl list_users | grep chef` ] || sudo rabbitmqctl add_user chef testing
sudo rabbitmqctl set_permissions -p /chef chef ".*" ".*" ".*"

# install Sun java via this witchcraft
# https://github.com/flexiondotorg/oab-java6
if [ ! -e /var/local/oab/deb/sun-java6-jre* ]
then
  cd /tmp/
  wget https://raw.github.com/flexiondotorg/oab-java6/master/oab-java6.sh -O oab-java6.sh
  chmod +x oab-java6.sh 
  sudo ./oab-java6.sh
fi
sudo apt-get -y --force-yes install sun-java6-jre

# add the opscode repo
echo "deb http://apt.opscode.com/ `lsb_release -cs`-0.10 main" | sudo tee /etc/apt/sources.list.d/opscode.list > /dev/null
sudo mkdir -p /etc/apt/trusted.gpg.d

# add their key
EXITSTATUS=2
while [ ${EXITSTATUS} == 2 ]
do
  gpg --keyserver keys.gnupg.net --recv-keys 83EF826A
  EXITSTATUS=$?
done
gpg --export packages@opscode.com | sudo tee /etc/apt/trusted.gpg.d/opscode-keyring.gpg > /dev/null

# install opscode's packages
sudo apt-get -y update
sudo apt-get -y install opscode-keyring
sudo apt-get -y install libgecode-dev

# install some more packages
sudo apt-get -y install zlib1g-dev
sudo apt-get -y install libxml2-dev

# install rvm
# http://beginrescueend.com/rvm/install/
if [ ! -e ~/.rvm/scripts/rvm ]
then
  bash -s stable < <(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
fi

# install these ruby libs (if we don't wlaready have them)
. ~/.rvm/scripts/rvm
[ -e ~/.rvm/usr/lib/libz.so ] || rvm pkg install zlib
[ -e ~/.rvm/usr/lib/libssl.so ] || rvm pkg install openssl
[ -e ~/.rvm/usr/lib/libyaml.so ] || rvm pkg install libyaml

# if we don't have ruby, rvm-install it
if [ ! "`which ruby`" ]
then
  rvm install 1.9.2
  rvm use 1.9.2 --default
fi

# if we've got the wrong version, rvm-install the right version
if [ ! "`ruby -v | grep 1.9.2`" ]
then
  rvm install 1.9.2
  rvm use 1.9.2 --default
fi

# if we can't use these gems, we need to reinstall ruby
ruby -e "require 'openssl' ; require 'zlib'" 2> /dev/null
if [ "$?" != "0" ]
then
  rvm reinstall 1.9.2
  rvm use 1.9.2 --default
fi

# install the chef gems (if we don't already have them)
for gem in chef-server chef-server-api chef-solr chef-server-webui 
do
  if [ ! "`gem list | grep \"${gem} \"`" ]
  then
    rvmsudo gem install ${gem} --no-ri --no-rdoc
  fi
done

# install the chef config file
sudo mkdir -p /etc/chef
[ ${WEBUI_PASSWORD} ] || WEBUI_PASSWORD='password'
[ ${SERVERNAME} ] || SERVERNAME=`ip -f inet -o addr | grep eth0 | tr -s ' ' ' ' | cut -d ' ' -f 4 | cut -d '/' -f 1`
cd ${STARTDIR}
cat files/server.rb | sed "s:SERVERNAME:${SERVERNAME}:" | sed "s:PASSWORD:${WEBUI_PASSWORD}:" | sudo tee /etc/chef/server.rb > /dev/null

# run the solr installer
# NOTE: THIS WILL NUKE ANY EXISTING CHEF SOLR CONFIGURATION AND DATA
rvmsudo chef-solr-installer -f

# install the upstart configs
[ ${CHEF_SERVER_USER} ] || CHEF_SERVER_USER=`whoami`
cd ${STARTDIR}/files/upstart
for file in `ls`
do
  cat ${file} | sed "s:USER:${CHEF_SERVER_USER}:" | sudo tee /etc/init/${file} > /dev/null
done

# start the services
sudo service chef-expander start || sudo service chef-expander restart
sudo service chef-solr start || sudo service chef-solr restart
sudo service chef-server start || sudo service chef-server restart

# install nginx and set up the vhost to proxy the chef webui
sudo apt-get install -y nginx
cd ${STARTDIR}
sudo cp files/nginx/vhost /etc/nginx/sites-available/chef
sudo rm /etc/nginx/sites-enabled/default
sudo ln -s /etc/nginx/sites-available/chef /etc/nginx/sites-enabled/default
sudo service nginx restart

# done
echo
echo "################################################################################"
echo
echo "Done"
echo

echo "Chef-server is at http://${SERVERNAME}:4000"
echo "Chef WebUI is at http://${SERVERNAME}"
echo
